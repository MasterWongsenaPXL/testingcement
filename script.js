document.addEventListener("DOMContentLoaded", function () {
    loadCards();
    updateCurrentTime();
    setInterval(updateCurrentTime, 1000);
    setInterval(checkTimers, 1000);
    setInterval(autoSave, 2000); // üî• ‡πÄ‡∏ã‡∏ü‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    sortCards();
    refreshCards()
});

function loadCards() {
    const container = document.getElementById("card-container");
    container.innerHTML = "";

    const storedCards = localStorage.getItem("cards");
    const imageStorage = JSON.parse(localStorage.getItem("imageStorage")) || {};

    if (storedCards) {
        const cards = JSON.parse(storedCards);
        cards.forEach(card => {
            card.image = imageStorage[card.id] || null; // üî• ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
            addCardToDOM(card);
        });
    }
}






function saveAllCards() {
    let allCards = [];
    let imageStorage = JSON.parse(localStorage.getItem("imageStorage")) || {};

    document.querySelectorAll(".card").forEach(cardElement => {
        const cardId = parseInt(cardElement.getAttribute("data-id"));
        const title = cardElement.querySelector(".card-title").innerText;
        const time = cardElement.querySelector(".time").innerText;
        const color = cardElement.classList.contains("blue") ? "blue" :
            cardElement.classList.contains("yellow") ? "yellow" : "purple";
        const imageElement = cardElement.querySelector(".card-image");
        const imageSrc = imageElement ? imageElement.src : null;

        if (imageSrc) {
            imageStorage[cardId] = imageSrc; // üî• ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏¢‡∏Å‡πÑ‡∏ß‡πâ‡πÉ‡∏ô imageStorage
        }

        allCards.push({
            id: cardId,
            title: title,
            time: time,
            color: color
        });
    });

    localStorage.setItem("cards", JSON.stringify(allCards));
    localStorage.setItem("imageStorage", JSON.stringify(imageStorage)); // üî• ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏¢‡∏Å‡πÑ‡∏ß‡πâ
    alert("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!");
}






// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÉ‡∏´‡∏°‡πà
function addNewCard() {
    const currentTime = new Date().toLocaleTimeString("th-TH", { hour12: false });
    const newCard = {
        id: Date.now(),
        tag: "Tag " + (Math.floor(Math.random() * 5) + 1),
        title: "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠",
        time: currentTime,
        color: getRandomColor(),
        image: null
    };
    sortCards();
    addCardToDOM(newCard);
    saveCard(newCard);
    refreshCards()
}

function saveCard(card) {
    let cards = JSON.parse(localStorage.getItem("cards")) || [];
    cards.push({
        ...card,
        image: card.image || null // üî• ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏£‡∏π‡∏õ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    });

    localStorage.setItem("cards", JSON.stringify(cards));
}




function addCardToDOM(card) {
    const container = document.getElementById("card-container");

    const cardElement = document.createElement("div");
    cardElement.classList.add("card", card.color);
    cardElement.setAttribute("data-id", card.id);
    cardElement.style.position = "relative"; // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö‡∏≠‡∏¥‡∏á‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πå‡∏î

    let imageHTML = card.image
        ? `<img src="${card.image}" class="card-image">
           <button class="remove-image-btn" onclick="removeImage(${card.id})">‡∏•‡∏ö‡∏£‡∏π‡∏õ</button>`
        : `<button class="add-image-btn" onclick="enablePasteImage(${card.id})">‡∏ß‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏à‡∏≠</button>`;

    cardElement.innerHTML = `
        <div class="card-header" style="display: flex; align-items: center; justify-content: space-between; position: relative;">
            <span class="queue-number">#${card.queueNumber}</span> <!-- ‚úÖ ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏¥‡∏ß -->
            <span class="card-title" id="title-${card.id}" onclick="editTitle(${card.id})">${card.title}</span>
            <span class="close-btn" onclick="removeCard(${card.id})" 
                  style="position: absolute; right: -70px; top: -5px; cursor: pointer; font-size: 18px; color: red;">
                  ‚úñ
            </span>
        </div>
        <div class="image-container" id="image-container-${card.id}">
            ${imageHTML}
        </div>
        <div class="time" id="time-${card.id}" onclick="editTime(${card.id})">${card.time}</div>
        <div class="alert" id="alert-${card.id}" style="display: none;">‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤!</div>
        <div class="actions">
            <button class="start-btn" onclick="startTimer(${card.id})"
            style="margin: 20px;">+20 ‡∏ô‡∏≤‡∏ó‡∏µ</button>
            <button class="add-time-btn" onclick="addFiveMinutes(${card.id})"            
            style="margin: 20px;">+5 ‡∏ô‡∏≤‡∏ó‡∏µ</button>
        </div>
    `;

    container.appendChild(cardElement);
}


// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ß‡∏•‡∏≤
function editTime(cardId) {
    const timeElement = document.getElementById(`time-${cardId}`);
    const currentTime = timeElement.innerText;

    // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å HH:mm:ss ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏Ñ‡πà HH:mm (24 ‡∏ä‡∏°.)
    const [hours, minutes] = currentTime.split(":");
    const formattedTime = `${hours.padStart(2, "0")}:${minutes.padStart(2, "0")}`;

    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á input type="time" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ß‡∏•‡∏≤ (24 ‡∏ä‡∏°.)
    const inputElement = document.createElement("input");
    inputElement.type = "time";
    inputElement.value = formattedTime;
    inputElement.classList.add("time-input");

    // ‚úÖ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î Enter ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏∑‡πà‡∏ô ‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡∏°‡πà
    inputElement.addEventListener("blur", function () {
        updateCardTime(cardId, inputElement.value);
    });

    inputElement.addEventListener("keypress", function (event) {
        if (event.key === "Enter") {
            updateCardTime(cardId, inputElement.value);
            inputElement.blur();
        }
    });

    // ‚úÖ ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°‡∏î‡πâ‡∏ß‡∏¢ input
    timeElement.replaceWith(inputElement);
    inputElement.focus();
}



function editTitle(cardId) {
    const titleElement = document.getElementById(`title-${cardId}`);
    const currentTitle = titleElement.innerText;

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á input ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà
    const inputElement = document.createElement("input");
    inputElement.type = "text";
    inputElement.value = currentTitle;
    inputElement.classList.add("title-input");

    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î Enter ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏∑‡πà‡∏ô ‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà
    inputElement.addEventListener("blur", function () {
        updateCardTitle(cardId, inputElement.value);
    });

    inputElement.addEventListener("keypress", function (event) {
        if (event.key === "Enter") {
            updateCardTitle(cardId, inputElement.value);
            inputElement.blur();
        }
    });

    // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°‡∏î‡πâ‡∏ß‡∏¢ input
    titleElement.replaceWith(inputElement);
    inputElement.focus();
    sortCards();
    refreshCards()
}

function updateCardTitle(cardId, newTitle) {
    let cards = JSON.parse(localStorage.getItem("cards")) || [];
    cards = cards.map(card => {
        if (card.id === cardId) {
            card.title = newTitle;
        }
        return card;
    });

    localStorage.setItem("cards", JSON.stringify(cards));

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á `<span>` ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ó‡∏ô `<input>`
    const titleElement = document.createElement("span");
    titleElement.classList.add("card-title");
    titleElement.id = `title-${cardId}`;
    titleElement.innerText = newTitle;
    titleElement.setAttribute("onclick", `editTitle(${cardId})`);

    const inputElement = document.querySelector(`.title-input`);
    if (inputElement) {
        inputElement.replaceWith(titleElement);
    }

    sortCards();
    refreshCards()
}

// ‚úÖ ‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (Array)
let toastQueue = [];
let isToastShowing = false;

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á Toast ‡∏ó‡∏µ‡∏•‡∏∞‡∏≠‡∏±‡∏ô (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏¥‡∏ß)
function showToast(message, type = "success") {
    toastQueue.push({ message, type });

    // üî• ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏™‡∏î‡∏á => ‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å
    if (!isToastShowing) {
        processToastQueue();
    }
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
function processToastQueue() {
    if (toastQueue.length === 0) {
        isToastShowing = false;
        return;
    }

    isToastShowing = true;
    const { message, type } = toastQueue.shift(); // ‡∏î‡∏∂‡∏á‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß

    const toast = document.createElement("div");
    toast.classList.add("toast", type);
    toast.innerText = message;
    document.body.appendChild(toast);

    // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡πÄ‡∏≠‡∏á‡πÉ‡∏ô 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    setTimeout(() => {
        toast.style.opacity = "0";
        setTimeout(() => {
            toast.remove();
            processToastQueue(); // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß
        }, 500);
    }, 2000);
}



// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î
function enablePasteImage(cardId) {
    navigator.clipboard.read().then(items => {
        for (let item of items) {
            for (let type of item.types) {
                if (type.startsWith("image/")) {
                    item.getType(type).then(blob => {
                        let fileSizeKB = (blob.size / 1024).toFixed(2); // üî• ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏£‡∏¥‡∏á (KB)
                        let maxSizeKB = 500; // üî• ‡∏Ç‡∏ô‡∏≤‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï

                        if (blob.size > maxSizeKB * 1024) {
                            let excessSize = (fileSizeKB - maxSizeKB).toFixed(2);
                            showToast(`‚ö†Ô∏è ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ! (${fileSizeKB}KB, ‡πÄ‡∏Å‡∏¥‡∏ô‡∏°‡∏≤: ${excessSize}KB) ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥...`);
                            resizeImage(blob, cardId); // ‚úÖ ‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
                        } else {
                            processImage(blob, cardId);
                        }
                    }).catch(err => {
                        showToast("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û!", "error");
                    });
                    return;
                }
            }
        }
    }).catch(err => {
        showToast("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡πÉ‡∏ô‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ö‡∏≠‡∏£‡πå‡∏î!", "error");
    });
}


// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î‡∏†‡∏≤‡∏û‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
function resizeImage(imageBlob, cardId) {
    const reader = new FileReader();
    reader.readAsDataURL(imageBlob);
    reader.onload = function (event) {
        const img = new Image();
        img.src = event.target.result;
        img.onload = function () {
            const canvas = document.createElement("canvas");
            let width = img.width;
            let height = img.height;
            const maxSize = 256; // üî• ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 256x256px

            if (width > height) {
                if (width > maxSize) {
                    height *= maxSize / width;
                    width = maxSize;
                }
            } else {
                if (height > maxSize) {
                    width *= maxSize / height;
                    height = maxSize;
                }
            }

            canvas.width = width;
            canvas.height = height;
            const ctx = canvas.getContext("2d");
            ctx.drawImage(img, 0, 0, width, height);

            // üî• ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô WebP ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û 50% ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î
            canvas.toBlob((blob) => {
                let newSizeKB = (blob.size / 1024).toFixed(2);
                showToast(`‚úÖ ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏£‡∏π‡∏õ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${newSizeKB}KB ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!`, "success"); // ‚úÖ ‡πÉ‡∏ä‡πâ Toast ‡πÅ‡∏ö‡∏ö Queue
                processImage(blob, cardId);
            }, "image/webp", 0.5);
        };
    };
}


// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡πÉ‡∏ô localStorage
function processImage(blob, cardId) {
    let reader = new FileReader();
    reader.readAsDataURL(blob);
    reader.onload = function (e) {
        let base64Image = e.target.result;

        try {
            let imageStorage = JSON.parse(localStorage.getItem("imageStorage")) || {};
            imageStorage[cardId] = base64Image;
            localStorage.setItem("imageStorage", JSON.stringify(imageStorage));

            let imageContainer = document.getElementById(`image-container-${cardId}`);
            imageContainer.innerHTML = `
                <img src="${base64Image}" class="card-image">
                <button class="remove-image-btn" onclick="removeImage(${cardId})">‡∏•‡∏ö‡∏£‡∏π‡∏õ</button>`;

            console.log(`‚úÖ ‡∏£‡∏π‡∏õ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (${(base64Image.length / 1024).toFixed(2)} KB)`);
        } catch (error) {
            alert("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ! ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ï‡πá‡∏°!");
            console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡πÄ‡∏ã‡∏ü‡∏£‡∏π‡∏õ:", error);
        }
    };
}







// ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
function removeImage(cardId) {
    let imageStorage = JSON.parse(localStorage.getItem("imageStorage")) || {};
    delete imageStorage[cardId];
    localStorage.setItem("imageStorage", JSON.stringify(imageStorage));

    let imageContainer = document.getElementById(`image-container-${cardId}`);
    imageContainer.innerHTML = `<button class="add-image-btn" onclick="enablePasteImage(${cardId})">‡∏ß‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏à‡∏≠</button>`;
}




// ‡πÄ‡∏ã‡∏ü‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
function autoSave() {
    let allCards = [];
    let imageStorage = JSON.parse(localStorage.getItem("imageStorage")) || {};

    document.querySelectorAll(".card").forEach(cardElement => {
        const cardId = parseInt(cardElement.getAttribute("data-id"));
        const title = cardElement.querySelector(".card-title").innerText;
        const time = cardElement.querySelector(".time").innerText;
        const color = cardElement.classList.contains("blue") ? "blue" :
            cardElement.classList.contains("yellow") ? "yellow" : "purple";
        const imageElement = cardElement.querySelector(".card-image");
        const imageSrc = imageElement ? imageElement.src : null;

        if (imageSrc) {
            imageStorage[cardId] = imageSrc;
        }

        allCards.push({
            id: cardId,
            title: title,
            time: time,
            color: color
        });
    });

    localStorage.setItem("cards", JSON.stringify(allCards));
    localStorage.setItem("imageStorage", JSON.stringify(imageStorage));
}



// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡∏°‡πà
function updateCardTime(cardId, newTime) {
    let cards = JSON.parse(localStorage.getItem("cards")) || [];

    // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á HH:mm:ss
    const now = new Date();
    const [hours, minutes] = newTime.split(":");
    now.setHours(parseInt(hours), parseInt(minutes), 0);
    const formattedTime = now.toLocaleTimeString("th-TH", { hour12: false });

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î
    cards = cards.map(card => {
        if (card.id === cardId) {
            return { ...card, time: formattedTime };
        }
        return card;
    });

    localStorage.setItem("cards", JSON.stringify(cards));

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥
    const timeElement = document.createElement("span");
    timeElement.classList.add("time");
    timeElement.id = `time-${cardId}`;
    timeElement.innerText = formattedTime;
    timeElement.setAttribute("onclick", `editTime(${cardId})`);

    const inputElement = document.querySelector(`.time-input`);
    if (inputElement) {
        inputElement.replaceWith(timeElement);
    }

    sortCards();
}



function startTimer(cardId) {
    const now = new Date();
    now.setMinutes(now.getMinutes() + 20);
    const newTime = now.toLocaleTimeString("th-TH", { hour12: false });

    document.getElementById(`time-${cardId}`).innerText = newTime;
    updateCardTime(cardId, newTime);

    sortCards();

    // üî• Refresh ‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à
    setTimeout(() => {
        location.reload();
    }, 500);
}


function addFiveMinutes(cardId) {
    const timeElement = document.getElementById(`time-${cardId}`);
    if (!timeElement) return;

    const currentTime = timeElement.innerText;
    const now = new Date();
    const [hours, minutes, seconds] = currentTime.split(":").map(Number);

    now.setHours(hours);
    now.setMinutes(minutes + 5);
    now.setSeconds(seconds);

    const newTime = now.toLocaleTimeString("th-TH", { hour12: false });

    timeElement.innerText = newTime;
    updateCardTime(cardId, newTime);
    sortCards();

    // üî• Refresh ‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à
    setTimeout(() => {
        location.reload();
    }, 500);
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
function clearAllData() {
    if (confirm("‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î?")) {
        localStorage.removeItem("cards"); // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πå‡∏î
        localStorage.removeItem("imageStorage"); // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
        document.getElementById("card-container").innerHTML = ""; // ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å DOM
        alert("‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
        console.log("üóë ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß!");
    }
}

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏° "‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ clearAllData()
document.getElementById("clear-all-btn").addEventListener("click", clearAllData);


// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤ ‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
function checkTimers() {
    let cards = JSON.parse(localStorage.getItem("cards")) || [];
    const now = new Date();

    cards.forEach(card => {
        const cardTime = new Date();
        const [hours, minutes, seconds] = card.time.split(":").map(Number);
        cardTime.setHours(hours);
        cardTime.setMinutes(minutes);
        cardTime.setSeconds(seconds);

        const timeDiff = Math.floor((cardTime - now) / 1000); // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        const alertElement = document.getElementById(`alert-${card.id}`);
        const timeElement = document.getElementById(`time-${card.id}`);

        if (timeDiff <= 0) {
            // üî• ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤
            const overTime = Math.abs(timeDiff); // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤
            const overMinutes = Math.floor(overTime / 60);
            const overSeconds = overTime % 60;

            alertElement.innerText = `‚è∞(‡πÄ‡∏•‡∏¢‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ${overMinutes}:${overSeconds})`;
            alertElement.style.display = "block";
            alertElement.style.color = "red";
            timeElement.style.color = "gray";
        } else if (timeDiff <= 120) { // üî• ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤ 2 ‡∏ô‡∏≤‡∏ó‡∏µ
            const remainingMinutes = Math.floor(timeDiff / 60);
            const remainingSeconds = timeDiff % 60;

            alertElement.innerText = `‚è≥ ${remainingMinutes}:${remainingSeconds}`;
            alertElement.style.display = "block";
            alertElement.style.color = "orange";
            timeElement.style.color = "red";
        } else {
            // ‚úÖ ‡∏ã‡πà‡∏≠‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤
            alertElement.style.display = "none";
            timeElement.style.color = "";
        }
    });
}

// ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤
setInterval(checkTimers, 1000);


function sortCards() {
    let cards = JSON.parse(localStorage.getItem("cards")) || [];

    // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤ (‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡πâ‡∏≠‡∏¢‡∏™‡∏∏‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤)
    cards.sort((a, b) => {
        let timeA = new Date(`2000-01-01T${a.time}`);
        let timeB = new Date(`2000-01-01T${b.time}`);
        return timeA - timeB;
    });

    cards.forEach((card, index) => {
        card.queueNumber = index + 1; // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà 1
    });

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏á LocalStorage
    localStorage.setItem("cards", JSON.stringify(cards));

    // ‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà
    document.getElementById("card-container").innerHTML = "";
    cards.forEach(card => addCardToDOM(card));
}






function removeCard(cardId) {
    // ‚úÖ ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏à‡∏≤‡∏Å DOM
    document.querySelector(`.card[data-id="${cardId}"]`).remove();

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡∏à‡∏≤‡∏Å localStorage
    let cards = JSON.parse(localStorage.getItem("cards")) || [];
    let imageStorage = JSON.parse(localStorage.getItem("imageStorage")) || {};

    // ‚úÖ ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå
    cards = cards.filter(card => card.id !== cardId);

    // ‚úÖ ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å localStorage
    if (imageStorage[cardId]) {
        delete imageStorage[cardId];
    }

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á localStorage
    localStorage.setItem("cards", JSON.stringify(cards));
    localStorage.setItem("imageStorage", JSON.stringify(imageStorage));

    console.log(`üóë ‡∏Å‡∏≤‡∏£‡πå‡∏î ${cardId} ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß`);
}


function refreshCards() {
    document.getElementById("card-container").innerHTML = ""; // ‡∏•‡πâ‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà
    loadCards();
}



// ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
function updateCurrentTime() {
    const now = new Date();
    const timeString = now.toLocaleTimeString("th-TH", { hour12: false });
    document.getElementById("current-time").innerText = timeString + " ‡∏ô.";
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏∏‡πà‡∏°‡∏™‡∏µ‡∏Å‡∏≤‡∏£‡πå‡∏î
function getRandomColor() {
    const colors = ["blue", "yellow", "purple"];
    return colors[Math.floor(Math.random() * colors.length)];
}